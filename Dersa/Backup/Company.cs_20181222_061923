using System;
using DIOS.Common;
using DIOS.Common.Interfaces;
using DIOS.ObjectLib;
using Newtonsoft.Json;
using System.Runtime.Serialization;

namespace Dios.Securities
{
	[LocalizedName("Компания")]
	[DataContract]
	public class Company: DIOS.ObjectLib.Object
	{
		public Company():base(){}

		public Company(UniStructView v, ObjectFactory f) : base(v, f) { }

		public const string EntityClassName = "COMPANY";
		#region company
		protected SqlInt32 _company;
		[ObjectPropertyAttribute("#", true, false, 0, false, true)]
		public SqlInt32 company
		{
			get
			{
				return _company;
			}
			set
			{
				_company = value;
			}
		}
		#endregion
		#region changer
		protected SqlString _changer;
		[ObjectPropertyAttribute("changer", false, false, 255, true, false)]
		public SqlString changer
		{
			get
			{
				return _changer;
			}
			set
			{
				_changer = value;
			}
		}
		[DataMember]
		private object __changer
		{	get
			{
				if (_changer.IsNull) return null;
				return _changer.Value;
			}
		}
		#endregion
		#region created_at
		protected SqlDateTime _created_at;
		[ObjectPropertyAttribute("created_at", false, false, 0, true, false)]
		public SqlDateTime created_at
		{
			get
			{
				return _created_at;
			}
			set
			{
				_created_at = value;
			}
		}
		[DataMember]
		private object __created_at
		{	get
			{
				if (_created_at.IsNull) return null;
				return _created_at.Value;
			}
		}
		#endregion
		#region updated_at
		protected SqlDateTime _updated_at;
		[ObjectPropertyAttribute("updated_at", false, false, 0, true, false)]
		public SqlDateTime updated_at
		{
			get
			{
				return _updated_at;
			}
			set
			{
				_updated_at = value;
			}
		}
		[DataMember]
		private object __updated_at
		{	get
			{
				if (_updated_at.IsNull) return null;
				return _updated_at.Value;
			}
		}
		#endregion
		#region UID
		protected SqlGuid _UID = Guid.NewGuid();
		[ObjectPropertyAttribute("UID", true, false, 0, true, false)]
		public SqlGuid UID
		{
			get
			{
				return _UID;
			}
			set
			{
				_UID = value;
			}
		}
		[DataMember]
		private object __UID
		{	get
			{
				if (_UID.IsNull) return null;
				return _UID.Value;
			}
		}
		#endregion
		#region INN
		protected SqlString _INN;
		[ObjectPropertyAttribute("INN", false, false, 0, true, false)]
		public SqlString INN
		{
			get
			{
				return _INN;
			}
			set
			{
				_INN = value;
			}
		}
		[DataMember]
		private object __INN
		{	get
			{
				if (_INN.IsNull) return null;
				return _INN.Value;
			}
		}
		#endregion
		#region KPP
		protected SqlString _KPP;
		[ObjectPropertyAttribute("KPP", false, false, 0, true, false)]
		public SqlString KPP
		{
			get
			{
				return _KPP;
			}
			set
			{
				_KPP = value;
			}
		}
		[DataMember]
		private object __KPP
		{	get
			{
				if (_KPP.IsNull) return null;
				return _KPP.Value;
			}
		}
		#endregion
		#region name
		protected SqlString _name;
		[ObjectPropertyAttribute("name", false, false, 255, true, false)]
		public SqlString name
		{
			get
			{
				return _name;
			}
			set
			{
				_name = value;
			}
		}
		[DataMember]
		private object __name
		{	get
			{
				if (_name.IsNull) return null;
				return _name.Value;
			}
		}
		#endregion
		#region OGRN
		protected SqlString _OGRN;
		[ObjectPropertyAttribute("OGRN", false, false, 0, true, false)]
		public SqlString OGRN
		{
			get
			{
				return _OGRN;
			}
			set
			{
				_OGRN = value;
			}
		}
		[DataMember]
		private object __OGRN
		{	get
			{
				if (_OGRN.IsNull) return null;
				return _OGRN.Value;
			}
		}
		#endregion
		#region Константы
		#endregion
		#region RefObjects
		#endregion
		#region Методы
		#endregion
		#region GetUniView()
		protected override  UniStructView GetUniView()
		{
			IndexerPropertyDescriptorCollection props = this.GetObjectProperties();
			object[] dataStore = new object[props.Count];
			int i = 0;
			dataStore[i++] = company;
			dataStore[i++] = changer;
			dataStore[i++] = created_at;
			dataStore[i++] = updated_at;
			dataStore[i++] = UID;
			dataStore[i++] = INN;
			dataStore[i++] = KPP;
			dataStore[i++] = name;
			dataStore[i++] = OGRN;
			for(int k = i; k < props.Count; k++)
			{
				dataStore[k] = this[props[k].Name];
			}
			UniStructView result = new UniStructView(dataStore, props);
			return result;
		}
		#endregion
		#region Refs
		#endregion
		#region Properties
		#endregion
	}
}